//@author: a0122357l-reused



	/**
	 * origin: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\Date.cpp
	 */

//from TextBuddy
//for toDate Parsing

string Date::removeFirstWord(string userCommand){
	return trim(replace(userCommand, getFirstWord(userCommand), ""));
}

string Date::getFirstWord(string userCommand){
	string commandTypeString = splitParameters(userCommand)[0];
	return commandTypeString;
}

// This method only split string based on delimiter space
vector<string> Date::splitParameters(string commandParametersString){
	vector<string> tokens;
	istringstream iss(commandParametersString);
	copy(istream_iterator<string>(iss),
		istream_iterator<string>(),
		back_inserter<vector<string> >(tokens));

	return tokens;
}

inline string Date::trim_right(const string& s, const string& delimiters){
	return s.substr(0, s.find_last_not_of(delimiters) + 1);
}

inline string Date::trim_left(const string& s, const string& delimiters){
	return s.substr(s.find_first_not_of(delimiters));
}

inline string Date::trim(const string& s, const string& delimiters){
	if (!s.empty())
		return trim_left(trim_right(s, delimiters), delimiters);
	else
		return s;
}

bool Date::equalsIgnoreCase(const string& str1, const string& str2){
	if (str1.size() != str2.size()){
		return false;
	}
	for (string::const_iterator c1 = str1.begin(), c2 = str2.begin(); c1 != str1.end(); ++c1, ++c2){
		if (tolower(*c1) != tolower(*c2)){
			return false;
		}
	}
	return true;
}

	// End of segment: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\Date.cpp





	/**
	 * origin: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\Date.cpp
	 */

//from TextBuddy
string Date::replace(string a, string b, string c){
	int pos;
	do {
		pos = a.find(b);
		if (pos != -1)  a.replace(pos, b.length(), c);
	} while (pos != -1);
	return a;
}

	// End of segment: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\Date.cpp





