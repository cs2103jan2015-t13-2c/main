//@author: a0113716m



	/**
	 * origin: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\CommandDisplay.cpp
	 */

string CommandDisplay::execute(){
	ostringstream oss;
	vector<Task>::iterator iter;

	TaskManager* taskManagerInstance = TaskManager::getInstance();
	vector<Task>* allTasksPtr = taskManagerInstance->getAllCurrentTasks();
	if (allTasksPtr->size() == 0){
		return "There are no tasks to display!";
	}
	vector<Task> allTasks = *allTasksPtr;

	//Counts Task Number
	int taskNumber = 1;
	for (iter = allTasks.begin(); iter != allTasks.end(); ++iter) {
		oss << printTaskToUser(*iter, taskNumber);
		taskNumber++;
	}
	return oss.str();
}

Command* CommandDisplay::getInverseCommand(){
	return nullptr;
}

string CommandDisplay::printTaskToUser(Task toPrint, int taskNumber) {

	ostringstream oss;

	//Prints Task Number
	oss << "====================================================" << endl;
	oss << "Task #" << taskNumber << endl;
	oss << "====================================================" << endl;

	//Prints Task Details
	oss << "TASKNAME: ";
	oss << (toPrint).getTaskDetails() << endl;


	//Prints Task Start/End Time or Deadline (if any)
	Task::Type checkType = (toPrint).getTaskType();
	switch (checkType) {
	case Task::TIMED: {
		oss << "START: " << (toPrint).getTaskStartTime()->toString() << endl;
		oss << "END: " << (toPrint).getTaskEndTime()->toString() << endl;
		break;
	} case Task::DEADLINE: {
		oss << "DEADLINE: " << (toPrint).getTaskDeadline()->toString() << endl;
		break;
	} default:
		break;
	}

	//Prints Task Priority
	Task::Priority checkPri = (toPrint).getTaskPriority();
	switch (checkPri) {
	case Task::HIGH: {
		oss << "PRIORITY: HIGH" << endl;
		break;
	} default: {
		break;
	}
	}

	bool checkMarked = (toPrint).getTaskMarked();
	if (checkMarked) {
		oss << "DONE!" << endl;
	}

	return oss.str();
}
	// End of segment: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\CommandDisplay.cpp





	/**
	 * origin: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\CommandDisplay.h
	 */

#pragma once
#include <string>
#include <vector>
#include "TaskManager.h"
#include "Command.h"
#include <sstream>
#include "Task.h"
#include <iomanip>

using namespace std;

class CommandDisplay : public Command
{
public:
	CommandDisplay();
	~CommandDisplay();
	virtual string execute();
	virtual Command* getInverseCommand();
	string CommandDisplay::printTaskToUser(Task toPrint, int taskNumber);
};


	// End of segment: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\CommandDisplay.h





	/**
	 * origin: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\Parser.cpp
	 */

/*
This class is to parse the command line for TASKKY.

The parser will parse the user command differently depending on the 
keyword(ADD, UPDATE, DELETE, etc.), and return the necessary parameters 
to the Command Builder. 

For example, calling "add task by 10 may" will return _taskDetails = "task" 
and _taskDeadline = "10 may" to the Command Builder, which will create a 
task based on these parameters.
*/

#include "Parser.h"

int Parser::_taskNumber;
string Parser::_taskDetails;
Date* Parser::_taskStartTime = nullptr;
Date* Parser::_taskEndTime = nullptr;
Date* Parser::_taskDeadline = nullptr;
Task::Priority Parser::_taskPriority = Task::NORMAL;
string Parser::_duration;
bool Parser::_taskMarked;
bool Parser::_foundMarked;
bool Parser::_foundPriority;

/*
* ====================================================================
*  Parser for Command Add
* ====================================================================
*/
void Parser::parseCommandAdd(string userCommand){
	Parser::clearPreviousParse();
	TaskManager* taskManagerInstance = TaskManager::getInstance();

	string text = removeFirstWord(userCommand);
	if (text == ""){
		throw ParseException(ERROR_MESSAGE_PARSING_ADD);
	}
	vector<string> textVec = splitParameters(text);
	textVec.push_back("\n");	//Represents the end of vector

	string timeString;
	ostringstream temp;
	vector<string>::iterator iter = textVec.begin();


	//Adding task details
	while (!isKeyword(*iter)){
		temp << *iter << " ";
		iter++;
	};
	if (temp.str() == ""){
		throw ParseException(ERROR_MESSAGE_PARSING_TASK);
	}
	_taskDetails = temp.str();
	temp.str("");

	//Adding task deadline (if it is deadline task)
	if (equalsIgnoreCase(*iter, "by")){
		iter++;
		while (!isKeyword(*iter)){
			temp << *iter << " ";
			iter++;
		};
		timeString = temp.str();
		_taskDeadline = parseTimeString(timeString);
		temp.str("");
	}

	//Adding task start time (if it is timed task)
	if (equalsIgnoreCase(*iter, "from")){
		iter++;
		while (!equalsIgnoreCase(*iter, "to")){
			if (iter == textVec.end()){
				throw CommandException(ERROR_MESSAGE_NOENDTIME);
			}
			temp << *iter << " ";
			iter++;
		};
		timeString = temp.str();
		_taskStartTime = parseTimeString(timeString);
		temp.str("");

		//Adding task end time
		iter++;
		while (!isKeyword(*iter)){
			temp << *iter << " ";
			iter++;
		};
		timeString = temp.str();
		_taskEndTime = parseTimeString(timeString);
		if (_taskEndTime->isEarlierThan(*(_taskStartTime)) == 1){
			throw CommandException(ERROR_MESSAGE_INVALIDENDTIME);
		}
		temp.str("");
	}

	//Adding task priority
	if (equalsIgnoreCase(*iter, "#impt") || equalsIgnoreCase(*iter, "#high")){
		_taskPriority = Task::Priority::HIGH;
	} 
}

/*
* ====================================================================
*  Parser for Command Update
* ====================================================================
*/
void Parser::parseCommandUpdate(string userCommand){
	Parser::clearPreviousParse();

	ostringstream oss;
	string text = removeFirstWord(userCommand);
	if (text == ""){
		throw ParseException(ERROR_MESSAGE_PARSING_UPDATE);
	}

	//Getting the task to change
	string taskNumberStr = getFirstWord(text);
	Parser::_taskNumber = atoi(taskNumberStr.c_str());
	Task taskToChange = TaskManager::getTask(Parser::_taskNumber);

	_taskDetails = taskToChange.getTaskDetails();
	_taskDeadline = taskToChange.getTaskDeadline();
	_taskStartTime = taskToChange.getTaskStartTime();
	_taskEndTime = taskToChange.getTaskEndTime();
	_taskPriority = taskToChange.getTaskPriority();

	//Getting the attribute to change
	text = removeFirstWord(text);
	toLowerCase(text);
	if (text == ""){
		throw ParseException(ERROR_MESSAGE_PARSING_UPDATEARGUMENTS);
	}
	string attributeToChange = getFirstWord(text);

	//Getting the details to change
	string updatedStr;
	text = removeFirstWord(text);
	if (text == ""){
		throw ParseException(ERROR_MESSAGE_PARSING_MISSINGDETAILS);
	}
	updatedStr = text;


	//Changes are made here
	if (attributeToChange == "details"){
		_taskDetails = updatedStr+" ";
	} 
	else if (attributeToChange == "deadline"){
		_taskDeadline = (parseTimeString(updatedStr+" "));
	} 
	else if (attributeToChange == "starttime"){
		_taskStartTime = (parseTimeString(updatedStr+" "));
	} 
	else if (attributeToChange == "endtime"){
		_taskEndTime = (parseTimeString(updatedStr+" "));
	} 
	else if (attributeToChange == "priority"){
		if (updatedStr == "normal"){
			_taskPriority = Task::Priority::NORMAL;
		} else if (updatedStr == "high"){
			_taskPriority = Task::Priority::HIGH;
		} else{
			throw ParseException(ERROR_MESSAGE_PARSING_PRIORITY);
		}
	}
	else {
		throw ParseException(ERROR_MESSAGE_PARSING_UPDATEARGUMENTS);
	}
}

/*
* ====================================================================
*  Parser for Command Delete
* ====================================================================
*/
void Parser::parseCommandDelete(string userCommand){
	Parser::clearPreviousParse();

	string text = removeFirstWord(userCommand);
// -------------------------Error Catching-------------------------------
	if (text == "")
		throw ParseException(ERROR_MESSAGE_DELETE_TASKNUM);
// ----------------------------------------------------------------------

	string task_number_str = getFirstWord(text);
	text = removeFirstWord(text);
	_taskNumber = atoi(task_number_str.c_str());
}

/*
* ====================================================================
*  Parser for Command Mark
* ====================================================================
*/
void Parser::parseCommandMark(string userCommand){
	Parser::clearPreviousParse();

	string text = removeFirstWord(userCommand);

	string task_number_str = getFirstWord(text);
	text = removeFirstWord(text);
	_taskNumber = atoi(task_number_str.c_str());
}

/*
* ====================================================================
*  Parser for Command Unmark
* ====================================================================
*/
void Parser::parseCommandUnmark(string userCommand){
	Parser::clearPreviousParse();

	string text = removeFirstWord(userCommand);

	string task_number_str = getFirstWord(text);
	text = removeFirstWord(text);
	_taskNumber = atoi(task_number_str.c_str());
}

	// End of segment: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\Parser.cpp





	/**
	 * origin: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\Parser.cpp
	 */

bool Parser::isKeyword(string word){
	return (equalsIgnoreCase(word, "by") || equalsIgnoreCase(word, "from") || 
			equalsIgnoreCase(word, "#impt") || equalsIgnoreCase(word, "#high") ||
			word == "\n");
}

bool Parser::isSearchKeyword(string word){
	return (equalsIgnoreCase(word, "by") || equalsIgnoreCase(word, "from") ||
			equalsIgnoreCase(word, "#impt") || equalsIgnoreCase(word, "#high") ||
			equalsIgnoreCase(word, "before") || equalsIgnoreCase(word, "after") ||
			equalsIgnoreCase(word, "done") || equalsIgnoreCase(word, "undone") ||
			equalsIgnoreCase(word, "next") || word == "\n");
}

Date* Parser::parseTimeString(string timeStr){
	if (timeStr == ""){
		throw CommandException(ERROR_MESSAGE_PARSING_INVALIDTIME);
	}
	toLowerCase(timeStr);
		
	int year = Date().getYear();
	int mon(0); 
	int day(0); 
	int hour(12);
	int minute(0);
	string temp;

	temp = getFirstWord(timeStr);

	//E.g. User types in "today"
	if (temp == "today"){
		mon = Date().getMonth();
		day = Date().getDay();
	}

	//E.g. User types in "tomorrow"
	else if (temp == "tomorrow"){
		mon = Date().getMonth();
		day = Date().getDay() + 1;
	}

	//E.g. User types in "this thursday"
	else if (temp == "this"){
		timeStr = timeStr.substr(timeStr.find_first_of(' ') + 1);
		temp = (getFirstWord(timeStr));
		int taskDay = parseDayName(temp);
		int diffinDays = taskDay - Date().getDayName();
		//If date has passed, refer to next week
		if (diffinDays < 0){
			diffinDays = diffinDays + 7;
		}

		mon = Date().getMonth();
		day = Date().getDay() + diffinDays;
	}

	//E.g. User types in "next thursday"
	else if (temp == "next"){
		timeStr = timeStr.substr(timeStr.find_first_of(' ') + 1);
		temp = (getFirstWord(timeStr));
		int taskDay = parseDayName(temp);
		int diffinDays = taskDay - Date().getDayName() + 7;

		mon = Date().getMonth();
		day = Date().getDay() + diffinDays;
	}

	//E.g. User types in "9 apr"
	else {
		day = parseInt(temp);

		if (day > 31 || day < 0){
			throw CommandException(ERROR_MESSAGE_PARSING_INVALIDTIME);
		}

		timeStr = timeStr.substr(timeStr.find_first_of(' ') + 1);
		if (timeStr == ""){
			throw CommandException(ERROR_MESSAGE_PARSING_INVALIDTIME);
		}

		temp = (getFirstWord(timeStr));
		mon = parseMonthName(temp);
	}

	timeStr = timeStr.substr(timeStr.find_first_of(' ') + 1);
	if (timeStr != "") {
		temp = getFirstWord(timeStr);
	} else {
		if (mon < Date().getMonth()){
			++year;
		}
		else if (mon == Date().getMonth()){
			if (day < Date().getDay()){
				++year;
			}
		}
		return (new Date(year, mon, day, hour, minute));
	}

	//Checks if user keyed in a year (Default is set to current year)
	if (parseInt(temp) != -1) {
		year = parseInt(temp);

		timeStr = timeStr.substr(timeStr.find_first_of(' ') + 1);
		if (timeStr != "") {
			temp = getFirstWord(timeStr);
		} else{
			return (new Date(year, mon, day, hour, minute));
		}
	}

	bool isTime = parseTime(temp, hour, minute);
	if (!isTime){
		throw ParseException(ERROR_MESSAGE_PARSING_INVALIDTIME);
	}
	return (new Date(year, mon, day, hour, minute));
}

int Parser::parseDayName(string dayName) {
	int day = 0;

	if (dayName == "sunday" || dayName == "sun") {
		day = 0;
	} else if (dayName == "monday" || dayName == "mon") {
		day = 1;
	} else if (dayName == "tuesday" || dayName == "tue" || dayName == "tues") {
		day = 2;
	} else if (dayName == "wednesday" || dayName == "wed") {
		day = 3;
	} else if (dayName == "thursday" || dayName == "thu" || dayName == "thurs") {
		day = 4;
	} else if (dayName == "friday" || dayName == "fri") {
		day = 5;
	} else if (dayName == "saturday" || dayName == "sat") {
		day = 6;
	} else {
		throw ParseException(ERROR_MESSAGE_PARSING_DAYNAME);
	}
	return day;
}

int Parser::parseMonthName(string monthName) {
	int mon = 0;

	if (monthName == "january" || monthName == "jan") {
		mon = 0;
	} else if (monthName == "february" || monthName == "feb") {
		mon = 1;
	} else if (monthName == "march" || monthName == "mar") {
		mon = 2;
	} else if (monthName == "april" || monthName == "apr") {
		mon = 3;
	} else if (monthName == "may") {
		mon = 4;
	} else if (monthName == "june" || monthName == "jun") {
		mon = 5;
	} else if (monthName == "july" || monthName == "jul") {
		mon = 6;
	} else if (monthName == "august" || monthName == "aug") {
		mon = 7;
	} else if (monthName == "september" || monthName == "sep") {
		mon = 8;
	} else if (monthName == "october" || monthName == "oct") {
		mon = 9;
	} else if (monthName == "november" || monthName == "nov") {
		mon = 10;
	} else if (monthName == "december" || monthName == "dec") {
		mon = 11;
	} else {
		throw ParseException(ERROR_MESSAGE_PARSING_MONTHNAME);
	}
	return mon;
}

bool Parser::parseTime(string time, int &hour, int &minute){
	hour = 0;
	minute = 0;

	//Checks if time is in AM/PM 
	bool afterNoon = false;
	if (time.find("pm") != string::npos) {
		afterNoon = true;
	}

	char chars[] = ".:apmhrs";
	for (unsigned int i = 0; i < strlen(chars); ++i) {
		time.erase(remove(time.begin(), time.end(), chars[i]), time.end());
	}
	int t = parseInt(time);
	if (t == -1){
		return false;
	}

	//Checks if time is in format 12pm or 12:00pm
	if (t / 100 == 0) {
		hour = t % 100;
	} else {
		hour = t / 100;
		minute = t % 100;
	}

	if (hour < 12 && afterNoon){
		hour += 12;
	}
	if (hour == 12 && !afterNoon){
		hour = 0;
	}

	return true;
}


/*
* ====================================================================
*  Parser Initialization
* ====================================================================
*/
Parser::Parser(){
	clearPreviousParse();
}

void Parser::clearPreviousParse(){
	_taskDetails = "";
	_taskStartTime = 0;
	_taskEndTime = 0;
	_taskDeadline = 0;
	_taskPriority = Task::NORMAL;
	_taskMarked = false;
	_taskNumber = -1;
	_foundMarked = false;
	_foundPriority = false;
}

string Parser::getTaskDetails(){
	return _taskDetails;
}

Date* Parser::getTaskStartTime(){
	return _taskStartTime;
}

Date* Parser::getTaskEndTime(){
	return _taskEndTime;
}

Date* Parser::getTaskDeadline(){
	return _taskDeadline;
}

Task::Priority Parser::getTaskPriority(){
	return _taskPriority;
}

string Parser::getDuration(){
	return _duration;
}

bool Parser::getTaskMarked(){
	return _taskMarked;
}

int Parser::getTaskNumber(){
	return _taskNumber;
}

bool Parser::getFoundMarked(){
	return _foundMarked;
}

bool Parser::getFoundPriority(){
	return _foundPriority;
}

Parser::~Parser(){
}


/*
* ====================================================================
*  Error Messages
* ====================================================================
*/
const string Parser::ERROR_MESSAGE_PARSING_ADD = "There is no task to add"; 
const string Parser::ERROR_MESSAGE_PARSING_UPDATE = "Please enter a task number to update";
const string Parser::ERROR_MESSAGE_PARSING_UPDATEARGUMENTS = "There are no arguments to update";
const string Parser::ERROR_MESSAGE_PARSING_MISSINGDETAILS = "Task details cannot be empty";
const string Parser::ERROR_MESSAGE_PARSING_PRIORITY = "Please enter a valid Priority (LOW, NORMAL, HIGH)";
const string Parser::ERROR_MESSAGE_PARSING_DATEPASSED = "This date has already passed";
const string Parser::ERROR_MESSAGE_PARSING_DAYNAME = "Day is invalid";
const string Parser::ERROR_MESSAGE_PARSING_MONTHNAME = "Month is invalid";
const string Parser::ERROR_MESSAGE_PARSING_INVALIDTIME = "Time is invalid";
const string Parser::ERROR_MESSAGE_NOENDTIME = "Please enter the ending time!";
const string Parser::ERROR_MESSAGE_INVALIDENDTIME = "End time must be after start time!";
const string Parser::ERROR_MESSAGE_PARSING_TASK = "Please enter a task to add!";
const string Parser::ERROR_MESSAGE_DELETE_TASKNUM = "Please enter a task number to delete";
	// End of segment: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\Parser.cpp





	/**
	 * origin: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\Parser.h
	 */

#pragma once
#include <string>
#include "Date.h"
#include "Task.h"
#include "TaskManager.h"
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>
#include "ParseException.h"
#include "CommandException.h"

using namespace std;

class Parser{
public:
	Parser();
	~Parser();

	static void clearPreviousParse();

	static void parseCommandAdd(string userCommand);
	static void parseCommandUpdate(string userCommand);
	static void parseCommandDelete(string userCommand);
	static void parseCommandMark(string userCommand);
	static void parseCommandUnmark(string userCommand);
	static void parseCommandSearch(string userCommand);
	static void parseCommandChangeFileLocation(string userCommand);

	static string getTaskDetails();
	static Date* getTaskStartTime();
	static Date* getTaskEndTime();
	static Date* getTaskDeadline();
	static Task::Priority getTaskPriority();
	static string getDuration();
	static bool getTaskMarked();
	static int Parser::getTaskNumber();
	static bool Parser::getFoundMarked();
	static bool Parser::getFoundPriority();

	static string removeFirstWord(string userCommand);
	static string getFirstWord(string userCommand);
	static void toLowerCase(string &text);
	static vector<string> splitParameters(string commandParametersString);
	static string trim_right(const string& s, const string& delimiters = " \f\n\r\t\v");
	static string trim_left(const string& s, const string& delimiters = " \f\n\r\t\v");
	static unsigned int countWordsInString(const string& str);
	static string trim(const string& s, const string& delimiters = " \f\n\r\t\v");
	static bool equalsIgnoreCase(const string& str1, const string& str2);
	static int parseInt(string str);
	static string replace(string a, string b, string c);
	static bool isKeyword(string word);
	static bool isSearchKeyword(string word);
	static Date* Parser::parseTimeString(string timeStr);
	static int parseDayName(string dayName);
	static int parseMonthName(string monthName);
	static bool parseTime(string time, int &hour, int &minute);

	static char buffer[255];
	static const int INVALID_NUMBER_FORMAT = -1;
	static const string Parser::ERROR_MESSAGE_PARSING_ADD;
	static const string Parser::ERROR_MESSAGE_PARSING_UPDATE;
	static const string Parser::ERROR_MESSAGE_PARSING_UPDATEARGUMENTS;
	static const string Parser::ERROR_MESSAGE_PARSING_MISSINGDETAILS;
	static const string Parser::ERROR_MESSAGE_PARSING_PRIORITY;
	static const string Parser::ERROR_MESSAGE_PARSING_DATEPASSED;
	static const string Parser::ERROR_MESSAGE_PARSING_DAYNAME;
	static const string Parser::ERROR_MESSAGE_PARSING_MONTHNAME;
	static const string Parser::ERROR_MESSAGE_PARSING_INVALIDTIME;
	static const string Parser::ERROR_MESSAGE_NOENDTIME;
	static const string Parser::ERROR_MESSAGE_INVALIDENDTIME;
	static const string Parser::ERROR_MESSAGE_PARSING_TASK;
	static const string Parser::ERROR_MESSAGE_DELETE_TASKNUM;

private:
	static int _taskNumber;
	static string _taskDetails;
	static Date *_taskStartTime;
	static Date *_taskEndTime;
	static Date *_taskDeadline;
	static Task::Priority _taskPriority;
	static string _duration;
	static bool _taskMarked;
	static bool _foundMarked;
	static bool _foundPriority;
};

	// End of segment: C:\Users\Adi!\Desktop\CS2103\Taskky\Logic\Parser.h





	/**
	 * origin: C:\Users\Adi!\Desktop\CS2103\Taskky\LogicTests\ParserTest.cpp
	 */

#pragma once
#include "stdafx.h"
#include "CppUnitTest.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace LogicTest{
	TEST_CLASS(ParserTest){
	public:
		/*
		* ====================================================================
		*  Floating Tasks
		* ====================================================================
		*/
		TEST_METHOD(addFloatingTaskTest){  
			Parser::parseCommandAdd("add task");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
		} 
		
		/*
		* ====================================================================
		*  Deadline Tasks
		* ====================================================================
		*/
		TEST_METHOD(addDeadlineTaskTest01){
			Parser::parseCommandAdd("add task by 23 dec");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Assert::AreEqual<string>((Parser::getTaskDeadline())->toString(), "23 Dec 2015 (Wed), 12:00PM");

		} TEST_METHOD(addDeadlineTaskTest02){
			Parser::parseCommandAdd("add task by 1 jan");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Assert::AreEqual<string>((Parser::getTaskDeadline())->toString(), "01 Jan 2016 (Fri), 12:00PM");

		} TEST_METHOD(addDeadlineTaskTest03){
			Parser::parseCommandAdd("add task by 23 dec 5.30am");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Assert::AreEqual<string>((Parser::getTaskDeadline())->toString(), "23 Dec 2015 (Wed), 05:30AM");

		} TEST_METHOD(addDeadlineTaskTest04){
			Parser::parseCommandAdd("add task by 23 dec 2016");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Assert::AreEqual<string>((Parser::getTaskDeadline())->toString(), "23 Dec 2016 (Fri), 12:00PM");

		} TEST_METHOD(addDeadlineTaskTest05){
			Parser::parseCommandAdd("add task by 23 dec 2016 5.30am");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Assert::AreEqual<string>((Parser::getTaskDeadline())->toString(), "23 Dec 2016 (Fri), 05:30AM");

		} TEST_METHOD(addDeadlineTaskTest06){
			Parser::parseCommandAdd("add task by 23 dec 2016 6pm");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Assert::AreEqual<string>((Parser::getTaskDeadline())->toString(), "23 Dec 2016 (Fri), 06:00PM");

		} TEST_METHOD(addDeadlineTaskTest07){
			Parser::parseCommandAdd("add task by 23 dec 2016 1830hrs");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Assert::AreEqual<string>((Parser::getTaskDeadline())->toString(), "23 Dec 2016 (Fri), 06:30PM");

		} TEST_METHOD(addDeadlineTaskTest08){
			//This input will change each week
			Parser::parseCommandAdd("add task by this monday");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");

			int day;
			if (1 - Date().getDayName() >= 0){
				day = 1 - Date().getDayName() + Date().getDay();
			} else{
				day = 8 - Date().getDayName() + Date().getDay();
			};
			Date *deadline1 = new Date(Date().getYear(), Date().getMonth(), day, 12, 00);
			Assert::AreEqual<string>(Parser::getTaskDeadline()->toString(), deadline1->toString());

		} TEST_METHOD(addDeadlineTaskTest09){
			//This input will change each week
			Parser::parseCommandAdd("add task by this mon");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");

			int day;
			if (1 - Date().getDayName() >= 0){
				day = 1 - Date().getDayName() + Date().getDay();
			} else {
				day = 8 - Date().getDayName() + Date().getDay();
			};
			Date *deadline2 = new Date(Date().getYear(), Date().getMonth(), day, 12, 00);
			Assert::AreEqual<string>(Parser::getTaskDeadline()->toString(), deadline2->toString());

		} TEST_METHOD(addDeadlineTaskTest10){
			//This input will change each week
			Parser::parseCommandAdd("add task by this mon 5.30am");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");

			int day;
			if (1 - Date().getDayName() >= 0){
				day = 1 - Date().getDayName() + Date().getDay();
			} else {
				day = 8 - Date().getDayName() + Date().getDay();
			};
			Date *deadline3 = new Date(Date().getYear(), Date().getMonth(), day, 05, 30);
			Assert::AreEqual<string>(Parser::getTaskDeadline()->toString(), deadline3->toString());

		} TEST_METHOD(addDeadlineTaskTest11){
			//This input will change each day
			Parser::parseCommandAdd("add task by today 12pm");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Date *deadline4 = new Date(Date().getYear(), Date().getMonth(), Date().getDay(), 12, 00);
			Assert::AreEqual<string>(Parser::getTaskDeadline()->toString(), deadline4->toString());
		} 
		
		/*
		* ====================================================================
		*  Timed Tasks
		* ====================================================================
		*/
		TEST_METHOD(addTimedTaskTest01){		
			Parser::parseCommandAdd("add task from 23 dec to 27 dec");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Assert::AreEqual<string>((Parser::getTaskStartTime())->toString(), "23 Dec 2015 (Wed), 12:00PM");
			Assert::AreEqual<string>((Parser::getTaskEndTime())->toString(), "27 Dec 2015 (Sun), 12:00PM");
		} TEST_METHOD(addTimedTaskTest02){
			Parser::parseCommandAdd("add task from 23 dec 5.30am to 27 dec 6pm");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Assert::AreEqual<string>((Parser::getTaskStartTime())->toString(), "23 Dec 2015 (Wed), 05:30AM");
			Assert::AreEqual<string>((Parser::getTaskEndTime())->toString(), "27 Dec 2015 (Sun), 06:00PM");
		} TEST_METHOD(addTimedTaskTest03){
			Parser::parseCommandAdd("add task from 23 dec 0530hrs to 27 dec 1800hrs");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Assert::AreEqual<string>((Parser::getTaskStartTime())->toString(), "23 Dec 2015 (Wed), 05:30AM");
			Assert::AreEqual<string>((Parser::getTaskEndTime())->toString(), "27 Dec 2015 (Sun), 06:00PM");

		} TEST_METHOD(addTimedTaskTest04){
			//This input will change each week
			Parser::parseCommandAdd("add task from this monday to next tuesday");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");

			int day;
			if (1 - Date().getDayName() >= 0){
				day = 1 - Date().getDayName() + Date().getDay();
			} else{
				day = 8 - Date().getDayName() + Date().getDay();
			};
			Date *starttime1 = new Date(Date().getYear(), Date().getMonth(), day, 12, 00);
			Assert::AreEqual<string>(Parser::getTaskStartTime()->toString(), starttime1->toString());

			day = 9 - Date().getDayName() + Date().getDay();
			Date *endtime1 = new Date(Date().getYear(), Date().getMonth(), day, 12, 00);
			Assert::AreEqual<string>(Parser::getTaskEndTime()->toString(), endtime1->toString());

		} TEST_METHOD(addTimedTaskTest05){
			//This input will change each week
			Parser::parseCommandAdd("add task from this monday to next tue");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");

			int day;
			if (1 - Date().getDayName() >= 0){
				day = 1 - Date().getDayName() + Date().getDay();
			} else{
				day = 8 - Date().getDayName() + Date().getDay();
			};
			Date *starttime2 = new Date(Date().getYear(), Date().getMonth(), day, 12, 00);
			Assert::AreEqual<string>(Parser::getTaskStartTime()->toString(), starttime2->toString());

			day = 9 - Date().getDayName() + Date().getDay();
			Date *endtime2 = new Date(Date().getYear(), Date().getMonth(), day, 12, 00);
			Assert::AreEqual<string>(Parser::getTaskEndTime()->toString(), endtime2->toString());


		} TEST_METHOD(addTimedTaskTest06){
			//This input will change each week
			Parser::parseCommandAdd("add task from this monday to next tues");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");

			int day;
			if (1 - Date().getDayName() >= 0){
				day = 1 - Date().getDayName() + Date().getDay();
			} else{
				day = 8 - Date().getDayName() + Date().getDay();
			};
			Date *starttime3 = new Date(Date().getYear(), Date().getMonth(), day, 12, 00);
			Assert::AreEqual<string>(Parser::getTaskStartTime()->toString(), starttime3->toString());

			day = 9 - Date().getDayName() + Date().getDay();
			Date *endtime3 = new Date(Date().getYear(), Date().getMonth(), day, 12, 00);
			Assert::AreEqual<string>(Parser::getTaskEndTime()->toString(), endtime3->toString());

		} TEST_METHOD(addTimedTaskTest07){
			//This input will change each week
			Parser::parseCommandAdd("add task from this mon 3.30pm to next tue 5pm");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");

			int day;
			if (1 - Date().getDayName() >= 0){
				day = 1 - Date().getDayName() + Date().getDay();
			} else{
				day = 8 - Date().getDayName() + Date().getDay();
			};
			Date *starttime4 = new Date(Date().getYear(), Date().getMonth(), day, 15, 30);
			Assert::AreEqual<string>(Parser::getTaskStartTime()->toString(), starttime4->toString());

			day = 9 - Date().getDayName() + Date().getDay();
			Date *endtime4 = new Date(Date().getYear(), Date().getMonth(), day, 17, 00);
			Assert::AreEqual<string>(Parser::getTaskEndTime()->toString(), endtime4->toString());

		} TEST_METHOD(addTimedTaskTest08){
			//This input will change each week
			Parser::parseCommandAdd("add task from this mon 0100hrs to next tue 2359hrs");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");

			int day;
			if (1 - Date().getDayName() >= 0){
				day = 1 - Date().getDayName() + Date().getDay();
			} else{
				day = 8 - Date().getDayName() + Date().getDay();
			};
			Date *starttime5 = new Date(Date().getYear(), Date().getMonth(), day, 01, 00);
			Assert::AreEqual<string>(Parser::getTaskStartTime()->toString(), starttime5->toString());

			day = 9 - Date().getDayName() + Date().getDay();
			Date *endtime5 = new Date(Date().getYear(), Date().getMonth(), day, 23, 59);
			Assert::AreEqual<string>(Parser::getTaskEndTime()->toString(), endtime5->toString());
		} 
		
		/*
		* ====================================================================
		*  Priority Check
		* ====================================================================
		*/
		TEST_METHOD(addPriorityTest01){
			Parser::parseCommandAdd("add task #impt");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Assert::IsTrue(Parser::getTaskPriority() == Task::Priority::HIGH);

		} TEST_METHOD(addPriorityTest02){
			Parser::parseCommandAdd("add task by 23 dec #high");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Assert::AreEqual<string>((Parser::getTaskDeadline())->toString(), "23 Dec 2015 (Wed), 12:00PM");
			Assert::IsTrue(Parser::getTaskPriority() == Task::Priority::HIGH);

		} TEST_METHOD(addPriorityTest03){
			Parser::parseCommandAdd("add task from 23 dec to 27 dec #impt");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "task ");
			Assert::AreEqual<string>((Parser::getTaskStartTime())->toString(), "23 Dec 2015 (Wed), 12:00PM");
			Assert::AreEqual<string>((Parser::getTaskEndTime())->toString(), "27 Dec 2015 (Sun), 12:00PM");
			Assert::AreEqual<bool>(true, Parser::getTaskPriority() == Task::Priority::HIGH);
		}

		/*
		* ====================================================================
		*  Updating of Tasks
		* ====================================================================
		*/
		TEST_METHOD(updateTaskDetailsTest){
			Parser::parseCommandAdd("add task from 23 dec to 27 dec");
			Parser::parseCommandUpdate("update 1 details new task");
			Assert::AreEqual<string>(Parser::getTaskDetails(), "new task ");

		} TEST_METHOD(updateTaskStartTimeTest){
			Parser::parseCommandAdd("add task from 23 dec to 27 dec");
			Parser::parseCommandUpdate("update 1 starttime 25 dec");
			Assert::AreEqual<string>((Parser::getTaskStartTime())->toString(), "25 Dec 2015 (Fri), 12:00PM");

		} TEST_METHOD(updateTaskPriorityTest){
			Parser::parseCommandAdd("add task from 23 dec to 27 dec");
			Parser::parseCommandUpdate("update 1 priority high");
			Assert::AreEqual<bool>(true, Parser::getTaskPriority() == Task::HIGH);
		}
	};
}
	// End of segment: C:\Users\Adi!\Desktop\CS2103\Taskky\LogicTests\ParserTest.cpp





